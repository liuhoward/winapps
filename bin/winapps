#!/usr/bin/env bash

debug_log() {
    [ "${DEBUG}" = "true" ] || return 0
    echo "[$(date)-${RANDOM}] $*" | tee -a "$me_log"

}

_check_sudo() {
    # Determine whether the user has sudo permission
    if [[ "$EUID" -ne 0 ]]; then
        if sudo -l -U "$USER" | grep -q "ALL"; then
            echo "User $USER has sudo permission."
            pre_sudo="sudo"
        else
            echo "User $USER has no sudo permission."
            echo "Won't install xfreerdp automatically."
            exit 1
        fi
    else
        pre_sudo=""
    fi

    # Check if apt, yum, or dnf is installed
    if command -v apt >/dev/null; then
        install_cmd="$pre_sudo apt"
    elif command -v yum >/dev/null; then
        install_cmd="$pre_sudo yum"
    elif command -v dnf >/dev/null; then
        install_cmd="$pre_sudo dnf"
    else
        echo "Package manager not found.(apt/yum/dnf)"
        exit 1
    fi
}


main() {
    me_name="$(basename "$0")"
    me_path="$(dirname "$(readlink -f "$0")")"
    me_log="${me_path}/${me_name}.log"

    path_conf="$HOME/.config/winapps"
    path_share="$HOME/.local/share/winapps"
    file_conf="$path_conf/winapps.conf"

    [ -d "$path_conf" ] || mkdir -p "$path_conf"
    [ -d "${path_share}" ] || mkdir -p "$path_share"
    if [ -f "$file_conf" ]; then
        source "$file_conf"
    else
        cp "$me_path/../docs/winapps-example.conf" "$file_conf"
        echo "Please change $file_conf configuration. Exiting..."
        exit 1
    fi

    if ! command -v xfreerdp >/dev/null; then
        echo "Installing xfreerdp..."
        sudo apt-get update
        sudo apt-get install -y freerdp2-x11 || {
            echo "Failed to install xfreerdp" >&2
            exit 1
        }
    fi

    debug_log "START"

    # Get the timestamp of the last run
    last_run=$(stat -t -c %Y "$path_share/run" 2>/dev/null)

    debug_log "last_run:${last_run}"

    # Touch the run file to update its timestamp
    touch "$path_share/run"

    # Get the timestamp of this run
    this_run=$(stat -t -c %Y "$path_share/run")

    debug_log "this_run:${this_run}"

    # Check if the time difference between this run and the last run is less than 2 seconds
    if ((this_run - last_run < 2)); then
        echo "time too short"
        exit 1
    fi

    # Set the default value of RDP_NAME
    RDP_NAME="${RDP_NAME:-RDPWindows}"

    # Check if RDP_IP is empty
    if [[ -z "$RDP_IP" ]]; then
        # Check if the user is a member of the libvirt group
        if ! groups | grep -q libvirt; then
            echo "You are not a member of the libvirt group. Run the below then reboot."
            echo "  sudo usermod -a -G libvirt $(whoami)"
            echo "  sudo usermod -a -G kvm $(whoami)"
            exit 1
        fi

        # Check if the RDP VM is running
        if ! virsh list | grep -q "${RDP_NAME}"; then
            echo "${RDP_NAME} is not running, run:"
            echo "  virsh start ${RDP_NAME}"
            exit 1
        fi

        # Get the IP address of the RDP VM
        RDP_IP=$(virsh net-dhcp-leases default | awk "/${RDP_NAME}/ {print \$5; exit}")
        RDP_IP=${RDP_IP%%/*}
    fi

    if [ "${MULTIMON}" = "true" ]; then
        MULTI_FLAG="/multimon"
    else
        MULTI_FLAG="/span"
    fi

    debug_log "@:$*"
    arg_1="$1"
    arg_2="$2"

    xfreerdp_opt="xfreerdp ${RDP_FLAGS} /d:${RDP_DOMAIN} /u:${RDP_USER} /p:${RDP_PASS} /v:${RDP_IP} -decorations /cert:ignore +auto-reconnect +clipboard +home-drive -wallpaper /scale:${RDP_SCALE:-100} /dynamic-resolution"
    case "${arg_1}" in
    windows)
        $xfreerdp_opt /wm-class:"Microsoft Windows" >/dev/null 2>&1 &
        ;;
    check)
        debug_log "CHECK"
        $xfreerdp_opt ${MULTI_FLAG} /app:"explorer.exe"
        ;;
    manual)
        debug_log "MANUAL:${arg_2}"
        $xfreerdp_opt ${MULTI_FLAG} /app:"${arg_2}" >/dev/null 2>&1 &
        ;;
    install)
        :
        ;;
    *)
        debug_log "me_path: ${me_path}"
        if [ -e "${me_path}/../apps/${arg_1}/info" ]; then
            ## search from src
            source "${me_path}/../apps/${arg_1}/info"
            ICON="${me_path}/../apps/${arg_1}/icon.svg"
        elif [ -e "$path_share/apps/${arg_1}/info" ]; then
            ## search from user share
            source "$path_share/apps/${arg_1}/info"
            ICON="$path_share/apps/${arg_1}/icon.svg"
        elif [ -e "/usr/local/share/winapps/apps/${arg_1}/info" ]; then
            ## search from sys share
            source "/usr/local/share/winapps/apps/${arg_1}/info"
            ICON="/usr/local/share/winapps/apps/${arg_1}/icon.svg"
        else
            echo "You need to run 'bin/installer.sh' first."
            return 1
        fi
        if [ -n "${arg_2}" ]; then
            debug_log "HOME:${HOME}"
            FILE=$(echo "${arg_2}" | sed 's|'"${HOME}"'|\\\\tsclient\\home|;s|/|\\|g;s|\\|\\\\|g')
            debug_log "FILE:${FILE}"
            $xfreerdp_opt ${MULTI_FLAG} /wm-class:"${FULL_NAME}" /app:"${WIN_EXECUTABLE}" /app-icon:"${ICON}" /app-cmd:"\"${FILE}\"" &>/dev/null &
        else
            $xfreerdp_opt ${MULTI_FLAG} /wm-class:"${FULL_NAME}" /app:"${WIN_EXECUTABLE}" /app-icon:"${ICON}" &>/dev/null &
        fi
        ;;
    esac
    debug_log "END"
}

main "$@"
